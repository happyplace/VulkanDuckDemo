#version 450

layout(std140, set = 3, binding = 0) uniform WaveBuf
{
   float Wc1;
   float Wc2;
   float Wc3;
   float Time; // shader playback time (in seconds)
} Wave;

layout(set = 0, binding = 0, r32f) uniform readonly image2D prevSolInput;
layout(set = 1, binding = 0, r32f) uniform readonly image2D currSolInput;
layout(set = 2, binding = 0, r32f) uniform writeonly image2D imageOutput;

layout (local_size_x = NUM_GROUPS_X) in;
layout (local_size_y = NUM_GROUPS_Y) in;

// wave function stolen from https://www.shadertoy.com/view/MdXyzX

#define DRAG_MULT 0.28 // changes how much waves pull on the water
#define ITERATIONS_NORMAL 40 // waves iterations when calculating normals

// Calculates wave value and its derivative,
// for the wave direction, position in space, wave frequency and time
vec2 wavedx(vec2 position, vec2 direction, float frequency, float timeshift) {
  float x = dot(direction, position) * frequency + timeshift;
  float wave = exp(sin(x) - 1.0);
  float dx = wave * cos(x);
  return vec2(wave, -dx);
}

// Calculates waves by summing octaves of various waves with various parameters
float getwaves(vec2 position, int iterations)
{
  float iter = 0.0; // this will help generating well distributed wave directions
  float frequency = 1.0; // frequency of the wave, this will change every iteration
  float timeMultiplier = 2.0; // time multiplier for the wave, this will change every iteration
  float weight = 1.0;// weight in final sum for the wave, this will change every iteration
  float sumOfValues = 0.0; // will store final sum of values
  float sumOfWeights = 0.0; // will store final sum of weights
  for(int i=0; i < iterations; i++)
  {
    // generate some wave direction that looks kind of random
    vec2 p = vec2(sin(iter), cos(iter));
    // calculate wave data
    vec2 res = wavedx(position, p, frequency, Wave.Time * timeMultiplier);

    // shift position around according to wave drag and derivative of the wave
    position += p * res.y * weight * DRAG_MULT;

    // add the results to sums
    sumOfValues += res.x * weight;
    sumOfWeights += weight;

    // modify next octave parameters
    weight *= 0.82;
    frequency *= 1.18;
    timeMultiplier *= 1.07;

    // add some kind of random value to make next wave look random too
    iter += 1232.399963;
  }
  // calculate and return
  return sumOfValues / sumOfWeights;
}

void main() 
{
  uint x = gl_GlobalInvocationID.x;
  uint y = gl_GlobalInvocationID.y;

  float waveHeight = getwaves(vec2(x, y), ITERATIONS_NORMAL);
  waveHeight *= 200.0;
  imageStore(imageOutput, ivec2(x, y), vec4(waveHeight, 0.0f, 0.0f, 0.0f));
}
